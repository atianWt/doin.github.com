!function(e,t,a){if(a){var n={particles:{number:{value:50,density:{enable:!0,value_area:800}},color:{value:"#ffffff"},shape:{type:"circle",stroke:{width:0,color:"#000000"},polygon:{nb_sides:5},image:{src:"img/github.svg",width:100,height:100}},opacity:{value:.3,random:!1,anim:{enable:!1,speed:1,opacity_min:.1,sync:!1}},size:{value:8,random:!0,anim:{enable:!0,speed:15,size_min:.1,sync:!1}},line_linked:{enable:!0,distance:200,color:"#ffffff",opacity:.4,width:1},move:{enable:!0,speed:1,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:600,rotateY:1200}}},interactivity:{detect_on:"canvas",events:{onhover:{enable:!1,mode:"repulse"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:400,line_linked:{opacity:1}},bubble:{distance:400,size:40,duration:2,opacity:8,speed:3},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}}},retina_detect:!0},o={debounce:function(e,t,a){var n;return function(){var o=this,i=arguments,r=function(){n=null,a||e.apply(o,i)},s=a&&!n;clearTimeout(n),n=setTimeout(r,t),s&&e.apply(o,i)}},getAbsoluteUrl:function(){var e;return function(a){return e||(e=t.createElement("a")),e.href=a,e.href}}(),isTouch:"ontouchstart"in e&&navigator.userAgent.toLowerCase().match(/mobile|tablet/)||e.DocumentTouch&&t instanceof e.DocumentTouch||e.navigator.msPointerEnabled&&e.navigator.msMaxTouchPoints>0||e.navigator.pointerEnabled&&e.navigator.maxTouchPoints>0||!1,isCanvasSupported:function(){var e=t.createElement("canvas");return!(!e.getContext||!e.getContext("2d"))}},i={setToc:function(){var t=a("#J_myContent"),n="my-toc",o=a(".directory"),i=e.innerWidth,r=a("."+n);if(o.length){if(!r.length){var s=a('<div class="'+n+'"></div>'),c=t.children().first();c.is("h1")?s.insertAfter(c):s.insertBefore(c),r=a("."+n)}i<992&&!o.parent().is("."+n)?r.append(o):i>=992&&o.parent().is("."+n)&&o.insertBefore(t)}},mainNavToggle:function(){var e=a(".navbar-collapse");a(".js-toggle").on("click",function(){e.toggleClass("active")})},sidebarToggle:function(){var e=a(".my-sidebar"),t=a(".dimmer");a(".js-sidebar-toggle, .dimmer").on("click",function(){e.toggleClass("active"),t.toggleClass("active")})},setDemoSchema:function(){o.isTouch&&a(".js-demo").each(function(){var e="";this.href=e+encodeURIComponent(o.getAbsoluteUrl(this.href))})},setTouchClassName:function(){o.isTouch&&a(t.documentElement).addClass("touch")},setCopyButton:function(){var t=a(".code-wrap .hljs, .demo-wrap .hljs"),n='<button class="my-btn-copy js-copy" title="复制代码"><span class="glyphicon glyphicon-duplicate"></span></button><span class="my-copy-status js-copy-status">复制成功</span>';if(e.Clipboard){t.after(n);var o=(a(".js-copy-status"),new Clipboard(".js-copy",{text:function(e){return a(e).prev(".hljs").find("code").text()}}));o.on("success",function(e){console.info("Text:",e.text),e.clearSelection();var t=a(e.trigger),n=t.next(".my-copy-status"),o=setTimeout(function(){n.removeClass("success")},2500);t.data("timmer")&&clearTimeout(t.data("timmer")),a(e.trigger).data("timmer",o),n.addClass("success")}),o.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)})}},setParticles:function(){o.isCanvasSupported()&&a(".index-banner").length&&(t.getElementById("particles")||a(".index-banner").append('<div id="particles"></div>'),a.ajax({url:"https://a.alipayobjects.com/g/component/particles.js/2.0.0/particles.min.js",dataType:"script",cache:!0}).then(function(){var a=t.getElementById("particles");a&&e.particlesJS&&e.particlesJS("particles",n,function(){console.log("callback - particles.js config loaded")})}))},init:function(){this.setToc(),this.mainNavToggle(),this.sidebarToggle(),this.setDemoSchema(),this.setTouchClassName(),this.setCopyButton()}};a(function(){i.init()}),a(e).on("resize",o.debounce(i.setToc,200)),a(t).ready(function(n){a(".my-content img").each(function(e){var t=a(this),n=t.parent("a");n.size()<1&&(n=t.wrap('<a href="'+this.getAttribute("src")+'" data-lightbox="image-'+e+'" data-title="'+this.getAttribute("alt")+'"></a>').parent("a"))}),a(".J_qrcode").each(function(e,t){var n=a(t).next(".qrcode");new QRCode(n[0],{width:256,height:256,colorDark:"#444444",colorLight:"#ffffff",correctLevel:QRCode.CorrectLevel.H})}),a(".my-sidebar a").on("click",function(e){var t={url:a(e.currentTarget).attr("href"),scrollTop:a(".my-sidebar").scrollTop()};try{sessionStorage.setItem("nav",JSON.stringify(t))}catch(e){}}),function(){try{var e=sessionStorage.getItem("nav");e=e&&JSON.parse(e)}catch(e){}if(e&&e.url===location.pathname)a(".my-sidebar").scrollTop(e.scrollTop);else{var t=a('a[href="'+location.pathname+'"]'),n=t.offset();a(".my-sidebar").scrollTop(n.top-a(".container-fluid").height())}}();var o=!1,i=5;!function(){function n(e){var n=e,r=t.getElementById(n.substring(1)),s=a(r).offset().top-a(".navbar").height()-i;s>0&&(o=!0,a("html, body").animate({scrollTop:s},function(){o=!1}))}function r(){if(!o){for(var e=0,t=a("body").scrollTop()+a(".navbar").height(),n=s.length-1;n>=0;n--)if(s[n]<=t+i){e=n;break}a(".directory-item").removeClass("active").eq(e).addClass("active")}}a(".directory-item a").on("click",function(e){var t=a(e.currentTarget).attr("href");n(t),a(".directory-item").removeClass("active"),a(e.currentTarget).closest(".directory-item").addClass("active")});var s=a(".title-entry").map(function(e,t){return a(t).offset().top});if(s.length)if(a(e).scroll(r),location.hash){var c=decodeURIComponent(location.hash);n(c),a(".directory-item").removeClass("active"),a('a[href="'+c+'"]').closest(".directory-item").addClass("active")}else r()}(),a(".tab-control .tab").on("click",function(e){var t=a(e.currentTarget);if(!t.hasClass("active")){var n=t.closest(".tab-control");a(".tab",n).removeClass("active"),t.addClass("active"),a(".tab-item",n).removeClass("active").filter(".demo-"+t.data("type")).addClass("active")}})}),function(){var e=[],n=function(e){e=e.toLowerCase(),a(".search-list a").each(function(t,n){var o=a(n).data("title");!e||~o.indexOf(e)?a(n).removeClass("hide"):a(n).addClass("hide")});var t=a(".search-list a").not(".hide").length;a(".search-list")[t?"show":"hide"]()},o=function(e){var t=function(e,t){return["<a ",'data-title="',e.toLowerCase(),'" href="',t,'">',e,"</a>"].join("")},a=[];return e.forEach(function(e){a.push(t(e.title,e.url))}),a.join("")},i=function(e){var t=a(".search-list a").not(".hide");if(0!==t.length){var n=a(".search-list a.active").removeClass("active");0===n.length&&(n=t.eq(0));for(var o=n,i=n;(o=o[e]()).length;)if(!o.hasClass("hide")){i=o;break}a(i).addClass("active")[0].scrollIntoView()}},r=function(){var e=a(".search-list a").removeClass("active").not(".hide").eq(0).addClass("active");e.length&&e[0].scrollIntoView()},s=function(s){var c=t.getElementById("js-root").value;e.length||a.ajax({url:c+"searchResult.json",dataType:"json"}).then(function(t){e=t||[],a(".search-list").html(o(e)),a(".search-bar").show(),r(),a("#J_searchbox").on("focus",function(){a(".search-bar").addClass("active")}).on("blur",function(){setTimeout(function(){a(".search-bar").removeClass("active")},200)}).on("input",function(){var e=a(this).val();n(e),r()}).on("keydown",function(e){if(40===e.keyCode)e.preventDefault(),i("next");else if(38===e.keyCode)e.preventDefault(),i("prev");else if(13===e.keyCode){var t=a(".search-list a.active");t.length&&(location.href=t.attr("href"))}})})};s()}()}}(window,window.document,window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJkb2N1bWVudCIsIiQiLCJwYXJ0aWNsZXNDb25maWciLCJwYXJ0aWNsZXMiLCJudW1iZXIiLCJ2YWx1ZSIsImRlbnNpdHkiLCJlbmFibGUiLCJ2YWx1ZV9hcmVhIiwiY29sb3IiLCJzaGFwZSIsInR5cGUiLCJzdHJva2UiLCJ3aWR0aCIsInBvbHlnb24iLCJuYl9zaWRlcyIsImltYWdlIiwic3JjIiwiaGVpZ2h0Iiwib3BhY2l0eSIsInJhbmRvbSIsImFuaW0iLCJzcGVlZCIsIm9wYWNpdHlfbWluIiwic3luYyIsInNpemUiLCJzaXplX21pbiIsImxpbmVfbGlua2VkIiwiZGlzdGFuY2UiLCJtb3ZlIiwiZGlyZWN0aW9uIiwic3RyYWlnaHQiLCJvdXRfbW9kZSIsImJvdW5jZSIsImF0dHJhY3QiLCJyb3RhdGVYIiwicm90YXRlWSIsImludGVyYWN0aXZpdHkiLCJkZXRlY3Rfb24iLCJldmVudHMiLCJvbmhvdmVyIiwibW9kZSIsIm9uY2xpY2siLCJyZXNpemUiLCJtb2RlcyIsImdyYWIiLCJidWJibGUiLCJkdXJhdGlvbiIsInJlcHVsc2UiLCJwdXNoIiwicGFydGljbGVzX25iIiwicmVtb3ZlIiwicmV0aW5hX2RldGVjdCIsInV0aWwiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImNvbnRleHQiLCJ0aGlzIiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImdldEFic29sdXRlVXJsIiwiYSIsInVybCIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiaXNUb3VjaCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJEb2N1bWVudFRvdWNoIiwiaXNDYW52YXNTdXBwb3J0ZWQiLCJlbGVtIiwiZ2V0Q29udGV4dCIsImFwcCIsInNldFRvYyIsIiRjb250ZW50IiwidG9jQ2xhc3NOYW1lIiwiJHRvYyIsIndpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsIiR0b2NXcmFwIiwibGVuZ3RoIiwiJHdyYXBwZXIiLCIkaGVhZGVyIiwiY2hpbGRyZW4iLCJmaXJzdCIsImlzIiwiaW5zZXJ0QWZ0ZXIiLCJpbnNlcnRCZWZvcmUiLCJwYXJlbnQiLCJhcHBlbmQiLCJtYWluTmF2VG9nZ2xlIiwiJG5hdmJhckNvbGxhcHNlIiwib24iLCJ0b2dnbGVDbGFzcyIsInNpZGViYXJUb2dnbGUiLCIkc2lkZWJhciIsIiRkaW1tZXIiLCJzZXREZW1vU2NoZW1hIiwiZWFjaCIsInNjaGVtYSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNldFRvdWNoQ2xhc3NOYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwiYWRkQ2xhc3MiLCJzZXRDb3B5QnV0dG9uIiwiJGNvZGVCbG9ja3MiLCJjb3B5QnRuIiwiQ2xpcGJvYXJkIiwiYWZ0ZXIiLCJjbGlwYm9hcmQiLCJ0ZXh0IiwidHJpZ2dlciIsInByZXYiLCJmaW5kIiwiZSIsImNvbnNvbGUiLCJpbmZvIiwiY2xlYXJTZWxlY3Rpb24iLCIkdHJpZ2dlciIsIiRzdGF0dXMiLCJuZXh0IiwidGltbWVyIiwicmVtb3ZlQ2xhc3MiLCJkYXRhIiwiZXJyb3IiLCJhY3Rpb24iLCJzZXRQYXJ0aWNsZXMiLCJnZXRFbGVtZW50QnlJZCIsImFqYXgiLCJkYXRhVHlwZSIsImNhY2hlIiwidGhlbiIsInBhcnRpY2xlc0NvbnRhaW5lciIsInBhcnRpY2xlc0pTIiwibG9nIiwiaW5pdCIsInJlYWR5IiwiaWR4IiwiJGltYWdlIiwiJGltYWdlV3JhcExpbmsiLCJ3cmFwIiwiZ2V0QXR0cmlidXRlIiwiaSIsImQiLCJlUXJjb2RlIiwiUVJDb2RlIiwiY29sb3JEYXJrIiwiY29sb3JMaWdodCIsImNvcnJlY3RMZXZlbCIsIkNvcnJlY3RMZXZlbCIsIkgiLCJuYXZWYWx1ZSIsImN1cnJlbnRUYXJnZXQiLCJhdHRyIiwic2Nyb2xsVG9wIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEl0ZW0iLCJwYXJzZSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJtZW51SXRlbSIsIm9mZnNldCIsInRvcCIsImRpc2FibGVkU2Nyb2xsaW5nIiwiZGVsdGEiLCJzY3JvbGxJbnRvVmlldyIsImFuY2hvciIsImhlYWRlciIsInN1YnN0cmluZyIsImFuaW1hdGUiLCJvblNjcm9sbCIsInJlYWxPZmZzZXQiLCJlcSIsImNsb3Nlc3QiLCJtYXAiLCJfIiwiaXRlbSIsInNjcm9sbCIsImhhc2giLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0YXJnZXQiLCJoYXNDbGFzcyIsInRhYmNvbnRyb2wiLCJmaWx0ZXIiLCJkb0ZpbHRlciIsInRpdGxlIiwiaW5kZXhPZiIsImhhc1Zpc2libGVPbmUiLCJub3QiLCJidWlsZFNlYXJjaExpc3QiLCJ0cGwiLCJsaW5rIiwiam9pbiIsImRvbVN0cmluZyIsImZvckVhY2giLCJ1cGRhdGVBY3RpdmVJdGVtIiwidmlzaWJsZUl0ZW1zIiwiY3VycmVudCIsImZvdW5kIiwicmVzZXRBY3RpdmVJdGVtIiwiYWN0aXZlIiwiZmV0Y2hEYXRhIiwianNSb290IiwicmVzdWx0IiwiaHRtbCIsInNob3ciLCJ2YWwiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJDQUFBLFNBQVVBLEVBQVFDLEVBQVVDLEdBQzFCLEdBQUtBLEVBQUwsQ0FJQSxHQUFJQyxJQUNGQyxXQUNFQyxRQUNFQyxNQUFTLEdBQ1RDLFNBQ0VDLFFBQVUsRUFDVkMsV0FBYyxNQUdsQkMsT0FDRUosTUFBUyxXQUVYSyxPQUNFQyxLQUFRLFNBQ1JDLFFBQ0VDLE1BQVMsRUFDVEosTUFBUyxXQUVYSyxTQUNFQyxTQUFZLEdBRWRDLE9BQ0VDLElBQU8saUJBQ1BKLE1BQVMsSUFDVEssT0FBVSxNQUdkQyxTQUNFZCxNQUFTLEdBQ1RlLFFBQVUsRUFDVkMsTUFDRWQsUUFBVSxFQUNWZSxNQUFTLEVBQ1RDLFlBQWUsR0FDZkMsTUFB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Wm5DLFdBQVcsV0FDVGxFLEVBQUUsZUFBZW1JLFlBQVksV0FDNUIsT0FDRjlCLEdBQUcsUUFBUyxXQUNiLEdBQUlrQixHQUFPdkgsRUFBRTJELE1BQU0rSixLQUNuQnRCLEdBQVM3RSxHQUNUNEYsTUFDQzlHLEdBQUcsVUFBVyxTQUFTc0IsR0FDeEIsR0FBaUIsS0FBZEEsRUFBRWdHLFFBQ0hoRyxFQUFFaUcsaUJBQ0ZiLEVBQWlCLFlBQ1osSUFBa0IsS0FBZHBGLEVBQUVnRyxRQUNYaEcsRUFBRWlHLGlCQUNGYixFQUFpQixZQUNaLElBQWlCLEtBQWRwRixFQUFFZ0csUUFBZSxDQUN6QixHQUFJVixHQUFVak4sRUFBRSx3QkFDYmlOLEdBQVF4SCxTQUNUaUYsU0FBU25HLEtBQU8wSSxFQUFRL0MsS0FBSyxjQVN6Q21ELFVBRUR2TixPQUFRQSxPQUFPQyxTQUFVRCxPQUFPK04iLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsICQpIHtcbiAgaWYgKCEkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhcnRpY2xlc0NvbmZpZyA9IHtcbiAgICBcInBhcnRpY2xlc1wiOiB7XG4gICAgICBcIm51bWJlclwiOiB7XG4gICAgICAgIFwidmFsdWVcIjogNTAsXG4gICAgICAgIFwiZGVuc2l0eVwiOiB7XG4gICAgICAgICAgXCJlbmFibGVcIjogdHJ1ZSxcbiAgICAgICAgICBcInZhbHVlX2FyZWFcIjogODAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImNvbG9yXCI6IHtcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIiNmZmZmZmZcIlxuICAgICAgfSxcbiAgICAgIFwic2hhcGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJjaXJjbGVcIixcbiAgICAgICAgXCJzdHJva2VcIjoge1xuICAgICAgICAgIFwid2lkdGhcIjogMCxcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDAwMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicG9seWdvblwiOiB7XG4gICAgICAgICAgXCJuYl9zaWRlc1wiOiA1XG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgIFwic3JjXCI6IFwiaW1nL2dpdGh1Yi5zdmdcIixcbiAgICAgICAgICBcIndpZHRoXCI6IDEwMCxcbiAgICAgICAgICBcImhlaWdodFwiOiAxMDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwib3BhY2l0eVwiOiB7XG4gICAgICAgIFwidmFsdWVcIjogMC4zLFxuICAgICAgICBcInJhbmRvbVwiOiBmYWxzZSxcbiAgICAgICAgXCJhbmltXCI6IHtcbiAgICAgICAgICBcImVuYWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICBcInNwZWVkXCI6IDEsXG4gICAgICAgICAgXCJvcGFjaXR5X21pblwiOiAwLjEsXG4gICAgICAgICAgXCJzeW5jXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInNpemVcIjoge1xuICAgICAgICBcInZhbHVlXCI6IDgsXG4gICAgICAgIFwicmFuZG9tXCI6IHRydWUsXG4gICAgICAgIFwiYW5pbVwiOiB7XG4gICAgICAgICAgXCJlbmFibGVcIjogdHJ1ZSxcbiAgICAgICAgICBcInNwZWVkXCI6IDE1LFxuICAgICAgICAgIFwic2l6ZV9taW5cIjogMC4xLFxuICAgICAgICAgIFwic3luY1wiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJsaW5lX2xpbmtlZFwiOiB7XG4gICAgICAgIFwiZW5hYmxlXCI6IHRydWUsXG4gICAgICAgIFwiZGlzdGFuY2VcIjogMjAwLFxuICAgICAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgICBcIm9wYWNpdHlcIjogMC40LFxuICAgICAgICBcIndpZHRoXCI6IDFcbiAgICAgIH0sXG4gICAgICBcIm1vdmVcIjoge1xuICAgICAgICBcImVuYWJsZVwiOiB0cnVlLFxuICAgICAgICBcInNwZWVkXCI6IDEsXG4gICAgICAgIFwiZGlyZWN0aW9uXCI6IFwibm9uZVwiLFxuICAgICAgICBcInJhbmRvbVwiOiBmYWxzZSxcbiAgICAgICAgXCJzdHJhaWdodFwiOiBmYWxzZSxcbiAgICAgICAgXCJvdXRfbW9kZVwiOiBcIm91dFwiLFxuICAgICAgICBcImJvdW5jZVwiOiBmYWxzZSxcbiAgICAgICAgXCJhdHRyYWN0XCI6IHtcbiAgICAgICAgICBcImVuYWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICBcInJvdGF0ZVhcIjogNjAwLFxuICAgICAgICAgIFwicm90YXRlWVwiOiAxMjAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiaW50ZXJhY3Rpdml0eVwiOiB7XG4gICAgICBcImRldGVjdF9vblwiOiBcImNhbnZhc1wiLFxuICAgICAgXCJldmVudHNcIjoge1xuICAgICAgICBcIm9uaG92ZXJcIjoge1xuICAgICAgICAgIFwiZW5hYmxlXCI6IGZhbHNlLFxuICAgICAgICAgIFwibW9kZVwiOiBcInJlcHVsc2VcIlxuICAgICAgICB9LFxuICAgICAgICBcIm9uY2xpY2tcIjoge1xuICAgICAgICAgIFwiZW5hYmxlXCI6IHRydWUsXG4gICAgICAgICAgXCJtb2RlXCI6IFwicHVzaFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzaXplXCI6IHRydWVcbiAgICAgIH0sXG4gICAgICBcIm1vZGVzXCI6IHtcbiAgICAgICAgXCJncmFiXCI6IHtcbiAgICAgICAgICBcImRpc3RhbmNlXCI6IDQwMCxcbiAgICAgICAgICBcImxpbmVfbGlua2VkXCI6IHtcbiAgICAgICAgICAgIFwib3BhY2l0eVwiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJ1YmJsZVwiOiB7XG4gICAgICAgICAgXCJkaXN0YW5jZVwiOiA0MDAsXG4gICAgICAgICAgXCJzaXplXCI6IDQwLFxuICAgICAgICAgIFwiZHVyYXRpb25cIjogMixcbiAgICAgICAgICBcIm9wYWNpdHlcIjogOCxcbiAgICAgICAgICBcInNwZWVkXCI6IDNcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXB1bHNlXCI6IHtcbiAgICAgICAgICBcImRpc3RhbmNlXCI6IDIwMCxcbiAgICAgICAgICBcImR1cmF0aW9uXCI6IDAuNFxuICAgICAgICB9LFxuICAgICAgICBcInB1c2hcIjoge1xuICAgICAgICAgIFwicGFydGljbGVzX25iXCI6IDRcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgIFwicGFydGljbGVzX25iXCI6IDJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJyZXRpbmFfZGV0ZWN0XCI6IHRydWVcbiAgfTtcblxuICB2YXIgdXRpbCA9IHtcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgICB2YXIgdGltZW91dDtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcblxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblxuICAgICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QWJzb2x1dGVVcmw6IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIGlmICghYSkge1xuICAgICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhLmhyZWYgPSB1cmw7XG5cbiAgICAgICAgcmV0dXJuIGEuaHJlZjtcbiAgICAgIH07XG4gICAgfSkoKSxcblxuICAgIGlzVG91Y2g6IChcbiAgICAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmXG4gICAgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9tb2JpbGV8dGFibGV0LykpIHx8XG4gICAgKHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpIHx8XG4gICAgKHdpbmRvdy5uYXZpZ2F0b3JbJ21zUG9pbnRlckVuYWJsZWQnXSAmJlxuICAgIHdpbmRvdy5uYXZpZ2F0b3JbJ21zTWF4VG91Y2hQb2ludHMnXSA+IDApIHx8IC8vIElFIDEwXG4gICAgKHdpbmRvdy5uYXZpZ2F0b3JbJ3BvaW50ZXJFbmFibGVkJ10gJiZcbiAgICB3aW5kb3cubmF2aWdhdG9yWydtYXhUb3VjaFBvaW50cyddID4gMCkgfHwgLy8gSUUgPj0xMVxuICAgIGZhbHNlKSxcblxuICAgIGlzQ2FudmFzU3VwcG9ydGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICByZXR1cm4gISEoZWxlbS5nZXRDb250ZXh0ICYmIGVsZW0uZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhcHAgPSB7XG4gICAgLy8g6K6+572u55uu5b2V5pi+56S65L2N572uXG4gICAgc2V0VG9jOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkY29udGVudCA9ICQoJyNKX215Q29udGVudCcpO1xuICAgICAgdmFyIHRvY0NsYXNzTmFtZSA9ICdteS10b2MnO1xuICAgICAgdmFyICR0b2MgPSAkKCcuZGlyZWN0b3J5Jyk7XG4gICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHZhciAkdG9jV3JhcCA9ICQoJy4nICsgdG9jQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKCEkdG9jLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIOa3u+WKoCB3cmFwXG4gICAgICBpZiAoISR0b2NXcmFwLmxlbmd0aCkge1xuICAgICAgICB2YXIgJHdyYXBwZXIgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIHRvY0NsYXNzTmFtZSArICdcIj48L2Rpdj4nKTtcbiAgICAgICAgdmFyICRoZWFkZXIgPSAkY29udGVudC5jaGlsZHJlbigpLmZpcnN0KCk7XG5cbiAgICAgICAgaWYgKCRoZWFkZXIuaXMoJ2gxJykpIHtcbiAgICAgICAgICAkd3JhcHBlci5pbnNlcnRBZnRlcigkaGVhZGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkd3JhcHBlci5pbnNlcnRCZWZvcmUoJGhlYWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkdG9jV3JhcCA9ICQoJy4nICsgdG9jQ2xhc3NOYW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8g5bGP5bmV5a695bqm5bCP5LqOIDk5MiDogIzkuJToj5zljZXmnKrmj5LlhaXliLDmlofmoaPkuK1cbiAgICAgIGlmICh3aW5kb3dXaWR0aCA8IDk5MiAmJiAhJHRvYy5wYXJlbnQoKS5pcygnLicgKyB0b2NDbGFzc05hbWUpKSB7XG4gICAgICAgICR0b2NXcmFwLmFwcGVuZCgkdG9jKTtcbiAgICAgIH0gZWxzZSBpZiAod2luZG93V2lkdGggPj0gOTkyICYmICR0b2MucGFyZW50KCkuaXMoJy4nICsgdG9jQ2xhc3NOYW1lKSkge1xuICAgICAgICAkdG9jLmluc2VydEJlZm9yZSgkY29udGVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIG1haW5OYXZUb2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRuYXZiYXJDb2xsYXBzZSA9ICQoJy5uYXZiYXItY29sbGFwc2UnKTtcblxuICAgICAgJCgnLmpzLXRvZ2dsZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkbmF2YmFyQ29sbGFwc2UudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHNpZGViYXJUb2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRzaWRlYmFyID0gJCgnLm15LXNpZGViYXInKTtcbiAgICAgIHZhciAkZGltbWVyID0gJCgnLmRpbW1lcicpO1xuXG4gICAgICAkKCcuanMtc2lkZWJhci10b2dnbGUsIC5kaW1tZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNpZGViYXIudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAkZGltbWVyLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzZXREZW1vU2NoZW1hOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh1dGlsLmlzVG91Y2gpIHtcbiAgICAgICAgJCgnLmpzLWRlbW8nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBzY2hlbWEgPSAnJztcblxuICAgICAgICAgIHRoaXMuaHJlZiA9IHNjaGVtYSArIGVuY29kZVVSSUNvbXBvbmVudCh1dGlsLmdldEFic29sdXRlVXJsKHRoaXMuaHJlZikpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0VG91Y2hDbGFzc05hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHV0aWwuaXNUb3VjaCkge1xuICAgICAgICAkKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYWRkQ2xhc3MoJ3RvdWNoJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldENvcHlCdXR0b246IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRjb2RlQmxvY2tzID0gJCgnLmNvZGUtd3JhcCAuaGxqcywgLmRlbW8td3JhcCAuaGxqcycpO1xuICAgICAgdmFyIGNvcHlCdG4gPSAnPGJ1dHRvbiBjbGFzcz1cIm15LWJ0bi1jb3B5IGpzLWNvcHlcIiB0aXRsZT1cIuWkjeWItuS7o+eggVwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1kdXBsaWNhdGVcIj48L3NwYW4+PC9idXR0b24+PHNwYW4gY2xhc3M9XCJteS1jb3B5LXN0YXR1cyBqcy1jb3B5LXN0YXR1c1wiPuWkjeWItuaIkOWKnzwvc3Bhbj4nO1xuXG4gICAgICBpZiAod2luZG93LkNsaXBib2FyZCkge1xuICAgICAgICAkY29kZUJsb2Nrcy5hZnRlcihjb3B5QnRuKTtcbiAgICAgICAgdmFyICRjb3B5U3RhdHVzID0gJCgnLmpzLWNvcHktc3RhdHVzJyk7XG5cbiAgICAgICAgdmFyIGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJy5qcy1jb3B5Jywge1xuICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAkKHRyaWdnZXIpLnByZXYoJy5obGpzJykuZmluZCgnY29kZScpLnRleHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1RleHQ6JywgZS50ZXh0KTtcbiAgICAgICAgICBlLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgdmFyICR0cmlnZ2VyID0gJChlLnRyaWdnZXIpO1xuICAgICAgICAgIHZhciAkc3RhdHVzID0gJHRyaWdnZXIubmV4dCgnLm15LWNvcHktc3RhdHVzJyk7XG4gICAgICAgICAgdmFyIHRpbW1lciA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJHN0YXR1cy5yZW1vdmVDbGFzcygnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSwgMjUwMCk7XG5cbiAgICAgICAgICBpZiAoJHRyaWdnZXIuZGF0YSgndGltbWVyJykpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCgkdHJpZ2dlci5kYXRhKCd0aW1tZXInKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJChlLnRyaWdnZXIpLmRhdGEoJ3RpbW1lcicsIHRpbW1lcik7XG4gICAgICAgICAgJHN0YXR1cy5hZGRDbGFzcygnc3VjY2VzcycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjbGlwYm9hcmQub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FjdGlvbjonLCBlLmFjdGlvbik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVHJpZ2dlcjonLCBlLnRyaWdnZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0UGFydGljbGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdXRpbC5pc0NhbnZhc1N1cHBvcnRlZCgpIHx8ICEkKCcuaW5kZXgtYmFubmVyJykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFydGljbGVzJykpIHtcbiAgICAgICAgJCgnLmluZGV4LWJhbm5lcicpLmFwcGVuZCgnPGRpdiBpZD1cInBhcnRpY2xlc1wiPjwvZGl2PicpO1xuICAgICAgfVxuXG4gICAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6ICdodHRwczovL2EuYWxpcGF5b2JqZWN0cy5jb20vZy9jb21wb25lbnQvcGFydGljbGVzLmpzLzIuMC4wL3BhcnRpY2xlcy5taW4uanMnLFxuICAgICAgICBkYXRhVHlwZTogJ3NjcmlwdCcsXG4gICAgICAgIGNhY2hlOiAhMFxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhcnRpY2xlc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXJ0aWNsZXMnKTtcbiAgICAgICAgcGFydGljbGVzQ29udGFpbmVyICYmIHdpbmRvdy5wYXJ0aWNsZXNKUyAmJiB3aW5kb3cucGFydGljbGVzSlMoJ3BhcnRpY2xlcycsIHBhcnRpY2xlc0NvbmZpZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrIC0gcGFydGljbGVzLmpzIGNvbmZpZyBsb2FkZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNldFRvYygpO1xuICAgICAgdGhpcy5tYWluTmF2VG9nZ2xlKCk7XG4gICAgICB0aGlzLnNpZGViYXJUb2dnbGUoKTtcbiAgICAgIHRoaXMuc2V0RGVtb1NjaGVtYSgpO1xuICAgICAgdGhpcy5zZXRUb3VjaENsYXNzTmFtZSgpO1xuICAgICAgdGhpcy5zZXRDb3B5QnV0dG9uKCk7XG4gICAgICAvL3RvZG8g55+l5LmO5Zu+XG4gICAgICAvL3RoaXMuc2V0UGFydGljbGVzKCk7XG4gICAgfVxuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgYXBwLmluaXQoKTtcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCB1dGlsLmRlYm91bmNlKGFwcC5zZXRUb2MsIDIwMCkpO1xuXG4gIC8vIOWOn+mhtemdouWGheW1jOiEmuacrFxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbihlKSB7XG4gICAgLy8gd3JhcCBpbWFnZSB0byBlbmFibGUgXCJjbGljayB0byBwcmV2aWV3XCJcbiAgICAkKCcubXktY29udGVudCBpbWcnKS5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgdmFyICRpbWFnZSA9ICQodGhpcyk7XG4gICAgICB2YXIgJGltYWdlV3JhcExpbmsgPSAkaW1hZ2UucGFyZW50KCdhJyk7XG5cbiAgICAgIGlmICgkaW1hZ2VXcmFwTGluay5zaXplKCkgPCAxKSB7XG4gICAgICAgICRpbWFnZVdyYXBMaW5rID0gJGltYWdlLndyYXAoJzxhIGhyZWY9XCInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ3NyYycpICsgJ1wiIGRhdGEtbGlnaHRib3g9XCJpbWFnZS0nICsgaWR4ICsgJ1wiIGRhdGEtdGl0bGU9XCInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ2FsdCcpICsgJ1wiPjwvYT4nKVxuICAgICAgICAgIC5wYXJlbnQoJ2EnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJy5KX3FyY29kZScpLmVhY2goZnVuY3Rpb24oaSwgZCkge1xuICAgICAgdmFyIGVRcmNvZGUgPSAkKGQpLm5leHQoJy5xcmNvZGUnKTtcblxuICAgICAgbmV3IFFSQ29kZShlUXJjb2RlWzBdLCB7XG4gICAgICAgIHdpZHRoOiAyNTYsXG4gICAgICAgIGhlaWdodDogMjU2LFxuICAgICAgICBjb2xvckRhcms6IFwiIzQ0NDQ0NFwiLFxuICAgICAgICBjb2xvckxpZ2h0OiBcIiNmZmZmZmZcIixcbiAgICAgICAgY29ycmVjdExldmVsOiBRUkNvZGUuQ29ycmVjdExldmVsLkhcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gbmF2YmFyIHBvc2l0b24gaGFuZGxpbmdcbiAgICAkKCcubXktc2lkZWJhciBhJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG5hdlZhbHVlID0ge1xuICAgICAgICB1cmw6ICQoZS5jdXJyZW50VGFyZ2V0KS5hdHRyKCdocmVmJyksXG4gICAgICAgIHNjcm9sbFRvcDogJCgnLm15LXNpZGViYXInKS5zY3JvbGxUb3AoKSxcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCduYXYnLCBKU09OLnN0cmluZ2lmeShuYXZWYWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvL2RvIG5vdGhpbmdcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIChmdW5jdGlvbiBuYXZCYXJSZXN0b3JlKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5hdlZhbHVlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnbmF2Jyk7XG4gICAgICAgIG5hdlZhbHVlID0gbmF2VmFsdWUgJiYgSlNPTi5wYXJzZShuYXZWYWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vZG8gbm90aGluZ1xuICAgICAgfVxuXG4gICAgICBpZiAobmF2VmFsdWUgJiYgbmF2VmFsdWUudXJsID09PSBsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgICAkKCcubXktc2lkZWJhcicpLnNjcm9sbFRvcChuYXZWYWx1ZS5zY3JvbGxUb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1lbnVJdGVtID0gJCgnYVtocmVmPVwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiXScpXG4gICAgICAgIHZhciBvZmZzZXQgPSBtZW51SXRlbS5vZmZzZXQoKTtcbiAgICAgICAgJCgnLm15LXNpZGViYXInKVxuICAgICAgICAgIC5zY3JvbGxUb3Aob2Zmc2V0LnRvcCAtICQoJy5jb250YWluZXItZmx1aWQnKS5oZWlnaHQoKSk7XG4gICAgICB9XG4gICAgfSgpKTtcblxuICAgIHZhciBkaXNhYmxlZFNjcm9sbGluZyA9IGZhbHNlO1xuICAgIHZhciBkZWx0YSA9IDU7XG5cbiAgICAvLyBkaXJlY3RvcnlcbiAgICAoZnVuY3Rpb24gZGlyZWN0b3J5U2Nyb2xsKCkge1xuICAgICAgZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoYW5jaG9yKSB7XG4gICAgICAgIHZhciBocmVmID0gYW5jaG9yO1xuICAgICAgICAvLyB1c2UgbmF0aXZlIGRvbSBhcGkgdG8gcHJldmVudCBocmVmIGhhcyBzcGVjaWFsIGNoYXJhY3Rlciwgc2F5IC4sIyBhbmQgZXRjXG4gICAgICAgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChocmVmLnN1YnN0cmluZygxKSk7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSAkKGhlYWRlcikub2Zmc2V0KCkudG9wIC0gJCgnLm5hdmJhcicpLmhlaWdodCgpIC0gZGVsdGE7XG5cbiAgICAgICAgLy8gaWYgdGhlIHZhbHVlIGlzIHZhbGlkXG4gICAgICAgIGlmIChzY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgICAgZGlzYWJsZWRTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkaXNhYmxlZFNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICQoJy5kaXJlY3RvcnktaXRlbSBhJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgaHJlZiA9ICQoZS5jdXJyZW50VGFyZ2V0KS5hdHRyKCdocmVmJyk7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KGhyZWYpO1xuXG4gICAgICAgIC8vIHNldCBhY3RpdmUgZGlyZWN0b3J5IGl0ZW1cbiAgICAgICAgJCgnLmRpcmVjdG9yeS1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLmRpcmVjdG9yeS1pdGVtJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBvZmZzZXQgPSAkKCcudGl0bGUtZW50cnknKS5tYXAoZnVuY3Rpb24oXywgaXRlbSkge1xuICAgICAgICByZXR1cm4gJChpdGVtKS5vZmZzZXQoKS50b3A7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG9mZnNldC5sZW5ndGgpIHtcbiAgICAgICAgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgICAgICAgaWYgKGRpc2FibGVkU2Nyb2xsaW5nKSByZXR1cm47XG5cbiAgICAgICAgICB2YXIgaWR4ID0gMDtcbiAgICAgICAgICB2YXIgcmVhbE9mZnNldCA9ICQoJ2JvZHknKS5zY3JvbGxUb3AoKSArICQoJy5uYXZiYXInKS5oZWlnaHQoKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gb2Zmc2V0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0W2ldIDw9IHJlYWxPZmZzZXQgKyBkZWx0YSkge1xuICAgICAgICAgICAgICBpZHggPSBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkKCcuZGlyZWN0b3J5LWl0ZW0nKS5yZW1vdmVDbGFzcygnYWN0aXZlJykuZXEoaWR4KS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKG9uU2Nyb2xsKTtcblxuICAgICAgICAvLyBpbml0IGZyb20gcGFnZSBsb2FkaW5nXG4gICAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgLy8gaGFzaCBpcyBlbmNvZGVkIGluIHNhZmFyaVxuICAgICAgICAgIHZhciBocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICAgIHNjcm9sbEludG9WaWV3KGhyZWYpO1xuXG4gICAgICAgICAgJCgnLmRpcmVjdG9yeS1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICQoJ2FbaHJlZj1cIicgKyBocmVmICsgJ1wiXScpLmNsb3Nlc3QoJy5kaXJlY3RvcnktaXRlbScpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uU2Nyb2xsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgLy8gdGFiIGNvbnRyb2xcbiAgICAkKCcudGFiLWNvbnRyb2wgLnRhYicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgdGFiY29udHJvbCA9IHRhcmdldC5jbG9zZXN0KCcudGFiLWNvbnRyb2wnKTtcblxuICAgICAgJCgnLnRhYicsIHRhYmNvbnRyb2wpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIHRhcmdldC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAkKCcudGFiLWl0ZW0nLCB0YWJjb250cm9sKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbHRlcignLmRlbW8tJyArIHRhcmdldC5kYXRhKCd0eXBlJykpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gZG8gcXVpY2sgc2VhcmNoXG4gIChmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciBkb0ZpbHRlciA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAkKCcuc2VhcmNoLWxpc3QgYScpLmVhY2goZnVuY3Rpb24oXywgaXRlbSl7XG4gICAgICAgIHZhciB0aXRsZSA9ICQoaXRlbSkuZGF0YSgndGl0bGUnKTtcbiAgICAgICAgaWYgKCF0ZXh0IHx8IH50aXRsZS5pbmRleE9mKHRleHQpKSB7XG4gICAgICAgICAgJChpdGVtKS5yZW1vdmVDbGFzcygnaGlkZScpO1xuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgJChpdGVtKS5hZGRDbGFzcygnaGlkZScpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgaGFzVmlzaWJsZU9uZSA9ICQoJy5zZWFyY2gtbGlzdCBhJykubm90KCcuaGlkZScpLmxlbmd0aDtcbiAgICAgICQoJy5zZWFyY2gtbGlzdCcpW2hhc1Zpc2libGVPbmU/ICdzaG93JzogJ2hpZGUnXSgpO1xuICAgIH07XG5cbiAgICB2YXIgYnVpbGRTZWFyY2hMaXN0ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHRwbCA9IGZ1bmN0aW9uKHRpdGxlLCBsaW5rKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgJzxhICcsXG4gICAgICAgICAgJ2RhdGEtdGl0bGU9XCInLFxuICAgICAgICAgIHRpdGxlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgJ1wiIGhyZWY9XCInLFxuICAgICAgICAgIGxpbmssXG4gICAgICAgICAgJ1wiPicsXG4gICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgJzwvYT4nLFxuICAgICAgICBdLmpvaW4oJycpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGRvbVN0cmluZyA9IFtdO1xuICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICBkb21TdHJpbmcucHVzaCh0cGwoaXRlbS50aXRsZSwgaXRlbS51cmwpKTtcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBkb21TdHJpbmcuam9pbignJyk7XG4gICAgfTtcblxuICAgIHZhciB1cGRhdGVBY3RpdmVJdGVtID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAvLyDmsqHmnInmmL7npLrnmoRpdGVtXG4gICAgICB2YXIgdmlzaWJsZUl0ZW1zID0gJCgnLnNlYXJjaC1saXN0IGEnKS5ub3QoJy5oaWRlJyk7XG4gICAgICBpZih2aXNpYmxlSXRlbXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudCA9ICQoJy5zZWFyY2gtbGlzdCBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA9PT0gMCkgeyAvL+esrOS4gOasoeWHuueOsOeahOaDheWGtVxuICAgICAgICBjdXJyZW50ID0gdmlzaWJsZUl0ZW1zLmVxKDApXG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtID0gY3VycmVudDtcbiAgICAgIHZhciBmb3VuZCA9IGN1cnJlbnQ7XG4gICAgICB3aGlsZSgoaXRlbSA9IGl0ZW1bZGlyZWN0aW9uXSgpKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFpdGVtLmhhc0NsYXNzKCdoaWRlJykpIHtcbiAgICAgICAgICBmb3VuZCA9IGl0ZW07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJChmb3VuZCkuYWRkQ2xhc3MoJ2FjdGl2ZScpWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgfTtcblxuICAgIHZhciByZXNldEFjdGl2ZUl0ZW0gPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIGFjdGl2ZSA9ICQoJy5zZWFyY2gtbGlzdCBhJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAubm90KCcuaGlkZScpXG4gICAgICAgIC5lcSgwKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgIGlmKGFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgYWN0aXZlWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBmZXRjaERhdGEgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICB2YXIganNSb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pzLXJvb3QnKS52YWx1ZTtcblxuICAgICAgaWYoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiBqc1Jvb3QgKyAnc2VhcmNoUmVzdWx0Lmpzb24nLFxuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICBkYXRhID0gcmVzdWx0IHx8IFtdO1xuXG4gICAgICAgICAgJCgnLnNlYXJjaC1saXN0JykuaHRtbChidWlsZFNlYXJjaExpc3QoZGF0YSkpO1xuICAgICAgICAgICQoJy5zZWFyY2gtYmFyJykuc2hvdygpXG5cbiAgICAgICAgICByZXNldEFjdGl2ZUl0ZW0oKTtcblxuICAgICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50XG4gICAgICAgICAgJCgnI0pfc2VhcmNoYm94Jykub24oJ2ZvY3VzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoJy5zZWFyY2gtYmFyJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIH0pLm9uKCdibHVyJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJCgnLnNlYXJjaC1iYXInKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgIH0pLm9uKCdpbnB1dCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgdGV4dCA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICBkb0ZpbHRlcih0ZXh0KTtcbiAgICAgICAgICAgIHJlc2V0QWN0aXZlSXRlbSgpO1xuICAgICAgICAgIH0pLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZihlLmtleUNvZGUgPT09IDQwKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgdXBkYXRlQWN0aXZlSXRlbSgnbmV4dCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM4KSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgdXBkYXRlQWN0aXZlSXRlbSgncHJldicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGUua2V5Q29kZSA9PT0gMTMpe1xuICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICQoJy5zZWFyY2gtbGlzdCBhLmFjdGl2ZScpO1xuICAgICAgICAgICAgICBpZihjdXJyZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBjdXJyZW50LmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8g6I635Y+W5pWw5o2uXG4gICAgZmV0Y2hEYXRhKCk7XG4gIH0pKCk7XG59KSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCwgd2luZG93LmpRdWVyeSk7XG4iXX0=
